# Kubernetes Deployment for Agentic AI System
# Made with ‚ù§Ô∏è by Mulky Malikul Dhaher in Indonesia üáÆüá©

apiVersion: v1
kind: Namespace
metadata:
  name: agentic-ai-system
  labels:
    name: agentic-ai-system
    creator: mulky-malikul-dhaher
    country: indonesia

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: agentic-ai-app
  namespace: agentic-ai-system
  labels:
    app: agentic-ai
    component: main-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: agentic-ai
      component: main-app
  template:
    metadata:
      labels:
        app: agentic-ai
        component: main-app
    spec:
      containers:
      - name: agentic-ai
        image: agentic-ai:latest
        ports:
        - containerPort: 5000
          name: http
        env:
        - name: FLASK_ENV
          value: "production"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: agentic-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: agentic-secrets
              key: redis-url
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: agentic-secrets
              key: secret-key
        - name: ENABLE_DYNAMIC_AGENTS
          value: "true"
        - name: MAX_CONCURRENT_AGENTS
          value: "20"
        - name: SELENIUM_HEADLESS
          value: "true"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/system/status
            port: 5000
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/system/status
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
        volumeMounts:
        - name: data-volume
          mountPath: /app/data
        - name: logs-volume
          mountPath: /app/logs
      volumes:
      - name: data-volume
        persistentVolumeClaim:
          claimName: agentic-data-pvc
      - name: logs-volume
        persistentVolumeClaim:
          claimName: agentic-logs-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: agentic-ai-service
  namespace: agentic-ai-system
  labels:
    app: agentic-ai
spec:
  selector:
    app: agentic-ai
    component: main-app
  ports:
  - port: 80
    targetPort: 5000
    name: http
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: agentic-ai-ingress
  namespace: agentic-ai-system
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - agentic-ai.example.com
    secretName: agentic-ai-tls
  rules:
  - host: agentic-ai.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: agentic-ai-service
            port:
              number: 80

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: agentic-data-pvc
  namespace: agentic-ai-system
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: agentic-logs-pvc
  namespace: agentic-ai-system
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard

---
apiVersion: v1
kind: Secret
metadata:
  name: agentic-secrets
  namespace: agentic-ai-system
type: Opaque
data:
  # Base64 encoded values - replace with actual values
  database-url: cG9zdGdyZXNxbDovL3VzZXI6cGFzc0Bsb2NhbGhvc3Q6NTQzMi9hZ2VudGljX2Rh
  redis-url: cmVkaXM6Ly9sb2NhbGhvc3Q6NjM3OQ==
  secret-key: eW91ci1zdXBlci1zZWNyZXQta2V5LWhlcmU=

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: agentic-ai-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command: ["redis-server", "--appendonly", "yes"]
        volumeMounts:
        - name: redis-data
          mountPath: /data
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-data-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: agentic-ai-system
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-data-pvc
  namespace: agentic-ai-system
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: agentic-config
  namespace: agentic-ai-system
data:
  AGENTIC_ENVIRONMENT: "kubernetes"
  LOG_LEVEL: "INFO"
  ENABLE_DYNAMIC_AGENTS: "true"
  MAX_CONCURRENT_AGENTS: "20"

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: agentic-ai-hpa
  namespace: agentic-ai-system
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: agentic-ai-app
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
